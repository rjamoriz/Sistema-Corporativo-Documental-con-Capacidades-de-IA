# Dockerfile para Backend de FinancIA 2030 - GPU OPTIMIZED
# ✅ GPU SUPPORT: NVIDIA GeForce RTX 4070 (8GB VRAM) - CUDA 12.8
# Sistema con aceleración GPU mediante Docker + WSL2 + NVIDIA Container Toolkit

# Usar imagen base con CUDA
FROM nvidia/cuda:12.6.0-runtime-ubuntu22.04

# Variables de entorno
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive \
    CUDA_VISIBLE_DEVICES=0 \
    NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility

# Instalar Python 3.11 y dependencias del sistema
RUN apt-get update && apt-get install -y \
    software-properties-common \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update && apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3.11-distutils \
    python3-pip \
    build-essential \
    curl \
    git \
    libpq-dev \
    tesseract-ocr \
    tesseract-ocr-spa \
    poppler-utils \
    ffmpeg \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/*

# Configurar Python 3.11 como predeterminado
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 \
    && update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1

# Actualizar pip
RUN python3 -m pip install --upgrade pip setuptools wheel

# Crear directorio de trabajo
WORKDIR /app

# Copiar requirements
COPY backend/requirements.txt .

# Instalar numpy y scipy primero con versiones compatibles
RUN pip install --no-cache-dir numpy==1.26.4 scipy==1.11.4

# Instalar PyTorch con soporte CUDA (optimizado para CUDA 12.x)
RUN pip install torch==2.1.0 torchvision==0.16.0 torchaudio==2.1.0 --index-url https://download.pytorch.org/whl/cu121

# Remover paquetes problemáticos instalados por distutils
RUN pip install --ignore-installed blinker || true

# Instalar el resto de dependencias Python (excluyendo numpy y scipy que ya están instalados)
RUN pip install --no-cache-dir --ignore-installed -r requirements.txt

# Descargar modelos de spaCy
RUN python -m spacy download es_core_news_md --direct || \
    python -c "import spacy; spacy.cli.download('es_core_news_md')" || \
    echo "spaCy model will be downloaded at runtime"

# Copiar código del backend
COPY backend/ .

# Crear directorios necesarios
RUN mkdir -p logs data/ontology uploads

# Script de verificación de GPU
RUN echo '#!/usr/bin/env python3\n\
import torch\n\
print(f"PyTorch version: {torch.__version__}")\n\
print(f"CUDA available: {torch.cuda.is_available()}")\n\
if torch.cuda.is_available():\n\
    print(f"CUDA version: {torch.version.cuda}")\n\
    print(f"GPU device: {torch.cuda.get_device_name(0)}")\n\
    print(f"GPU memory: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.2f} GB")\n\
else:\n\
    print("WARNING: GPU not detected!")\n\
' > /app/check_gpu.py && chmod +x /app/check_gpu.py

# Exponer puerto
EXPOSE 8000

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Comando de inicio con verificación de GPU
CMD python check_gpu.py && python main.py
