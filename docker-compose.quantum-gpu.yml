# Docker Compose - Quantum & GPU Enhancement
# Version 2.0 - Nuevos servicios modulares
# NO AFECTA servicios existentes - Completamente opcional

version: '3.8'

services:
  # ========================================
  # NUEVO: GPU Embedding Service
  # ========================================
  gpu-embedding-service:
    build:
      context: ./services/gpu-embedding
      dockerfile: Dockerfile
    container_name: financia_gpu_embedding
    ports:
      - "8001:8001"
    environment:
      - EMBEDDING_MODEL=paraphrase-multilingual-mpnet-base-v2
      - SERVICE_PORT=8001
      - LOG_LEVEL=INFO
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    volumes:
      - gpu-embedding-models:/root/.cache/torch
    networks:
      - financia-network
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    labels:
      - "com.financia.service=gpu-embedding"
      - "com.financia.version=2.0"

  # ========================================
  # NUEVO: Quantum Dedupe Service (D-Wave)
  # ========================================
  quantum-dwave-service:
    build:
      context: ./services/quantum-dwave
      dockerfile: Dockerfile
    container_name: financia_quantum_dwave
    ports:
      - "8002:8002"
    environment:
      - DWAVE_API_TOKEN=${DWAVE_API_TOKEN:-}
      - SERVICE_PORT=8002
      - LOG_LEVEL=INFO
      - USE_SIMULATED_ANNEALING=true
    networks:
      - financia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "com.financia.service=quantum-dwave"
      - "com.financia.version=2.0"

  # ========================================
  # NUEVO: Quantum Dedupe Service (IBM Qiskit)
  # ========================================
  quantum-ibm-service:
    build:
      context: ./services/quantum-ibm
      dockerfile: Dockerfile
    container_name: financia_quantum_ibm
    ports:
      - "8003:8003"
    environment:
      - QISKIT_IBM_TOKEN=${QISKIT_IBM_TOKEN:-}
      - SERVICE_PORT=8003
      - LOG_LEVEL=INFO
      - USE_SIMULATOR=true
    networks:
      - financia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "com.financia.service=quantum-ibm"
      - "com.financia.version=2.0"

  # ========================================
  # NUEVO: Quantum ML Service (NVIDIA cuQuantum)
  # ========================================
  quantum-nvidia-service:
    build:
      context: ./services/quantum-nvidia
      dockerfile: Dockerfile
    container_name: financia_quantum_nvidia
    ports:
      - "8004:8004"
    environment:
      - SERVICE_PORT=8004
      - LOG_LEVEL=INFO
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - financia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "com.financia.service=quantum-nvidia"
      - "com.financia.version=2.0"

  # ========================================
  # NUEVO: Enhanced RAG Service
  # ========================================
  rag-enhanced-service:
    build:
      context: ./services/rag-enhanced
      dockerfile: Dockerfile
    container_name: financia_rag_enhanced
    ports:
      - "8005:8005"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - SERVICE_PORT=8005
      - LOG_LEVEL=INFO
      - GPU_EMBEDDING_URL=http://gpu-embedding-service:8001
    depends_on:
      - gpu-embedding-service
    networks:
      - financia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "com.financia.service=rag-enhanced"
      - "com.financia.version=2.0"

  # ========================================
  # NUEVO: DataStax Astra DB Vector Search Service
  # ========================================
  astra-vector-db-service:
    build:
      context: ./services/astra-vector-db
      dockerfile: Dockerfile
    container_name: financia_astra_vectordb
    ports:
      - "8006:8006"
    environment:
      # Astra DB Configuration (REQUIRED)
      - ASTRA_DB_TOKEN=${ASTRA_DB_TOKEN}
      - ASTRA_DB_API_ENDPOINT=${ASTRA_DB_API_ENDPOINT}
      - ASTRA_DB_KEYSPACE=${ASTRA_DB_KEYSPACE:-financia_vectors}
      - ASTRA_DB_COLLECTION=${ASTRA_DB_COLLECTION:-documents}
      # Service Configuration
      - SERVICE_PORT=8006
      - LOG_LEVEL=INFO
      # Embedding Services
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - COHERE_API_KEY=${COHERE_API_KEY:-}
      - USE_GPU_EMBEDDINGS=true
      - GPU_EMBEDDING_URL=http://gpu-embedding-service:8001
      # Redis Cache
      - ENABLE_CACHE=true
      - REDIS_URL=redis://redis:6379
      - CACHE_TTL=3600
      # Monitoring
      - ENABLE_METRICS=true
    depends_on:
      - gpu-embedding-service
      - redis
    networks:
      - financia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    labels:
      - "com.financia.service=astra-vectordb"
      - "com.financia.version=2.0"

  # ========================================
  # NUEVO: Quantum ML Service with PennyLane
  # ========================================
  quantum-ml-pennylane:
    build:
      context: ./services/quantum-ml-pennylane
      dockerfile: Dockerfile
    container_name: financia_quantum_ml
    ports:
      - "8007:8007"
    environment:
      - SERVICE_PORT=8007
      - N_QUBITS=4
      - N_LAYERS=3
      - LOG_LEVEL=INFO
    networks:
      - financia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    labels:
      - "com.financia.service=quantum-ml"
      - "com.financia.version=3.0"

  # ========================================
  # Redis (Cache for Astra DB Service)
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: financia_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - financia-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    labels:
      - "com.financia.service=redis"
      - "com.financia.version=2.0"

  # ========================================
  # Prometheus (Monitoring)
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: financia_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - financia-network
    restart: unless-stopped
    labels:
      - "com.financia.service=prometheus"
      - "com.financia.version=2.0"

  # ========================================
  # Grafana (Dashboards)
  # ========================================
  grafana:
    image: grafana/grafana:latest
    container_name: financia_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - financia-network
    restart: unless-stopped
    labels:
      - "com.financia.service=grafana"
      - "com.financia.version=2.0"

# ========================================
# Networks
# ========================================
networks:
  financia-network:
    name: financia-network
    driver: bridge

# ========================================
# Volumes
# ========================================
volumes:
  gpu-embedding-models:
    name: financia_gpu_models
  redis-data:
    name: financia_redis_data
  prometheus-data:
    name: financia_prometheus_data
  grafana-data:
    name: financia_grafana_data
